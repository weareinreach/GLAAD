// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//
// NextAuth tables
//
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

//
// End of NextAuth tables
//

model DefaultImage {
  id          String @id @default(cuid())
  description String
  image       String

  story Story[]
}

model StoryCategory {
  id String @id @default(cuid())

  category    String
  categoryKey String

  stories StoryToCategory[]
}

model Story {
  id String @id @default(cuid())

  name      String
  pronouns  String
  birthYear Int

  storyJoy    String
  keyJoy      String
  storyAccess String
  keyAccess   String

  // User provided image or use from our provided images
  image          String?
  defaultImage   DefaultImage? @relation(fields: [defaultImageId], references: [id])
  defaultImageId String?

  published Boolean @default(false)

  // For moderation values for submitted stories

  textToxicity    Float? // from https://perspectiveapi.com/
  imageModeration Json? // from https://docs.aws.amazon.com/rekognition/latest/dg/procedure-moderate-images.html

  isInfluencer Boolean @default(false)
  publicSlug   String? @unique

  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
  categories StoryToCategory[]
}

model StoryToCategory {
  category   StoryCategory @relation(fields: [categoryId], references: [id])
  categoryId String
  story      Story         @relation(fields: [storyId], references: [id])
  storyId    String

  @@id([categoryId, storyId])
}

model PartnerOrg {
  id      String  @id @default(cuid())
  name    String
  href    String
  image   String
  order   Int
  visible Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
